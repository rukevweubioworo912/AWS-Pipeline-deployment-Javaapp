name: Java App CI/CD

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY_URI: 891377181493.dkr.ecr.us-east-1.amazonaws.com/java-app-design
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repo
      uses: actions/checkout@v3

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Build with Maven
      working-directory: ./java-web-app
      run: mvn clean package

    - name: Run Tests
      working-directory: ./java-web-app
      run: mvn test

    - name: SonarCloud Scan
      working-directory: ./java-web-app
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mvn -U clean verify sonar:sonar \
        -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
        -Dsonar.organization=rukevweubioworo912 \
        -Dsonar.host.url=https://sonarcloud.io \
        -Dsonar.login=$SONAR_TOKEN \
        -Dsonar.sources=src


    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: java-web-app-jar
        path: java-web-app/target/*.jar

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      working-directory: ./java-web-app
      run: docker build -t ${{ env.DOCKER_USERNAME }}/java-web-app:latest .

    - name: Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_USERNAME }}/java-web-app:latest
        format: json
        output: trivy-report.json
        exit-code: 0

    - name: Upload Trivy Scan Report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-report
        path: trivy-report.json

    - name: Push Docker image to Docker Hub
      working-directory: ./java-web-app
      run: docker push ${{ env.DOCKER_USERNAME }}/java-web-app:latest

  deploy-ecr:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
        docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY_URI }}

    - name: Build Docker image for ECR
      working-directory: ./java-web-app
      run: docker build -t ${{ env.ECR_REPOSITORY_URI }}:latest .

    - name: Scan Docker image with Trivy (ECR)
      uses: aquasecurity/trivy-action@v0.35.0
      with:
        image-ref: ${{ env.ECR_REPOSITORY_URI }}:latest
        format: json
        output: trivy-report-ecr.json
        exit-code: 1

    - name: Upload Trivy Scan Report (ECR)
      uses: actions/upload-artifact@v4
      with:
        name: trivy-report-ecr
        path: trivy-report-ecr.json

    - name: Push Docker image to ECR
      run: docker push ${{ env.ECR_REPOSITORY_URI }}:latest
